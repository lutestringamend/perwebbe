version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: perweb-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-perweb}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - perweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: perweb-api
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-perweb}
      DB_SSLMODE: disable
      SERVER_PORT: 8080
      
      # JWT configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-this-in-production}
      JWT_TOKEN_EXPIRY: ${JWT_TOKEN_EXPIRY:-24h}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-168h}
      JWT_ISSUER: ${JWT_ISSUER:-personal-website-api}
      
      # Application mode
      GIN_MODE: ${GIN_MODE:-release}
    networks:
      - perweb-network
    restart: unless-stopped
    command: ["./main"]

networks:
  perweb-network:
    driver: bridge

volumes:
  postgres-data:
    name: perweb-postgres-data